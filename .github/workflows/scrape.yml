name: Fetch latest outages

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Python tools
      run: pip install -r requirements.txt

    - name: Fetch data from URL
      run: |
        curl -s "https://kubra.io/cluster-data/002/f738adb9-3478-457e-9af5-fc3b91ec6aec/e9a96a8c-1d46-402b-bfad-b5520c477f29/public/cluster-2/03200.json" > raw-data.json
        cat raw-data.json  # Print raw data to check if the content is valid

    - name: Validate JSON
      run: |
        if ! jq empty raw-data.json; then
          echo "Invalid JSON structure in raw-data.json"
          exit 1
        fi

    - name: Process JSON with jq
      run: |
        jq '{file_title: .file_title, file_data: .file_data[] | {
              id: .id,
              title: .title,
              n_out: .desc.n_out,
              cust_a: .desc.cust_a.val,
              etr: .desc.etr,
              start_time: .desc.start_time,
              geom_p: .geom.p
          }}' raw-data.json > outages-new.json
        cat outages-new.json  # Print processed JSON for debugging

    - name: Compare and prepare commit if necessary
      run: |
        if ! cmp -s outages.json outages-new.json; then
          mv outages-new.json outages.json
        fi

    - name: Generate commit message, commit, and push
      run: |
        git config user.name "Automated Commit Bot"
        git config user.email "actions@users.noreply.github.com"
        
        # Stage the file and commit if changes detected
        git add outages.json
        
        # Create a commit message with a timestamp
        timestamp=$(date -u)
        git commit -m "Update outages data: $timestamp" || exit 0
        
        # Pull and rebase to avoid conflicts, then push
        git pull --rebase
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
